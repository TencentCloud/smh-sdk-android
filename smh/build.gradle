/*
 *
 *  * Copyright (C) 2021 Tencent, Inc.
 *  *
 *  * Licensed under the Apache License, Version 2.0 (the "License");
 *  * you may not use this file except in compliance with the License.
 *  * You may obtain a copy of the License at
 *  *
 *  *      http://www.apache.org/licenses/LICENSE-2.0
 *  *
 *  * Unless required by applicable law or agreed to in writing, software
 *  * distributed under the License is distributed on an "AS IS" BASIS,
 *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  * See the License for the specific language governing permissions and
 *  * limitations under the License.
 *
 */
apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'com.kezong.fat-aar'

dokkaHtml.configure {
    dokkaSourceSets {
        named("main") {
            noAndroidSdkLink.set(false)
        }
    }
}

//是否包含灯塔
def includeBeacon = true

repositories {
    flatDir {
        dirs 'libs'
    }
}

def smhVersionName = "1.2.36"
def smhVersionCode = 10236

android {
    compileSdkVersion 29

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode smhVersionCode
        versionName smhVersionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {

        debug {
            it.buildConfigField 'String', 'SMH_VERSION_NAME', "\"$smhVersionName\""
            it.buildConfigField 'int', 'SMH_VERSION_CODE', "$smhVersionCode"
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            it.buildConfigField 'String', 'SMH_VERSION_NAME', "\"$smhVersionName\""
            it.buildConfigField 'int', 'SMH_VERSION_CODE', "$smhVersionCode"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    packagingOptions {
        exclude 'META-INF/AL2.0'
        exclude 'META-INF/LGPL2.1'
    }
}

fataar {
    /**
     * If transitive is true, local jar module and remote library's dependencies will be embed.
     * If transitive is false, just embed first level dependency
     * Local aar project does not support transitive, always embed first level
     * Default value is false
     * @since 1.3.0
     */
    transitive = true
}

dependencies {
//    implementation 'androidx.core:core-ktx:1.3.2'
//    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.4.31"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.1"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:1.4.3'

    implementation "com.squareup.retrofit2:retrofit:2.6.4"
    implementation "com.squareup.retrofit2:converter-gson:2.6.4"

//    implementation project(':foundation')
//    implementation project(':cos-android-base')
//    implementation project(':qcloud-track')
    implementation 'com.qcloud.cos:qcloud-foundation:1.5.69'
    implementation 'com.qcloud.cos:qcloud-cos-android-base:5.9.32'
    implementation 'com.qcloud.cos:qcloud-track:1.0.2'

    if(includeBeacon){
        embed('com.tencent.beacon:beacon-android-release:4.2.80.6:official@aar') {
            exclude(group:'com.android.support', module:'support-annotations')
            exclude(group:'androidx.annotation', module:'annotation')
        }
        embed('com.tencent.qimei:qimei:1.2.13.1') {
            exclude(group:'com.android.support', module:'support-annotations')
            exclude(group:'androidx.annotation', module:'annotation')
        }
    } else {
        compileOnly 'com.tencent.beacon:beacon-android-release:4.2.80.6:official@aar'
        compileOnly 'com.tencent.qimei:qimei:1.2.13.1'
    }

    // testImplementation for pure JVM unit tests
    testImplementation 'junit:junit:4.13.2'
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.4.1"


    // androidTestImplementation for Android instrumentation tests
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation "androidx.test:rules:1.3.0"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.4.1"
}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

task androidJavadocsJar(type: Jar, dependsOn: dokkaJavadoc) {
    archiveClassifier.set('javadoc')
    from "$buildDir/dokka/javadoc"
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}

if(includeBeacon) {
    project.extensions.add('artifactId', 'smh-android')
    project.extensions.add('artifactDesc', 'the core foundation for tencent cloud sdk')
    project.extensions.add('archiveFilePath', 'outputs/aar/smh-android-release.aar')
} else {
    project.extensions.add('artifactId', 'smh-android-nobeacon')
    project.extensions.add('artifactDesc', 'the core foundation for tencent cloud sdk - -no beacon')
    project.extensions.add('archiveFilePath', 'outputs/aar/smh-android-nobeacon-release.aar')
}

// assemble 先生成 aar 包
// publishMavenAarPublicationToMavenLocal 发布到本地
// publishMavenAarPublicationToMavenRepository 发布到 mavenCentral
apply from: '../publish.gradle'

//发布本地repo
apply plugin: 'maven'
uploadArchives {
    repositories.mavenDeployer {
        pom.project {
            groupId 'com.qcloud.cos'
            artifactId 'smh-android-nobeacon'
            version '1.2.33'
            packaging 'aar'
        }
        repository(url: uri("${rootProject.projectDir}/repo"))
    }
}



//static String quotWrapper(key) {
//    if (key == null) {
//        return "\"\""
//    }
//    return "\"".concat(key).concat("\"")
//}

//task myTxxest() {
//    System.out.println("sonatypeUsername " + findProperty("ossrhUsername"))
//    System.out.println("sonatypePassword " + findProperty("ossrhPassword"))
//}